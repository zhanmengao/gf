// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: base_packet.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PacketHead PB的packet头部
type PacketHead struct {
	Cmd            int32             `protobuf:"varint,1,opt,name=Cmd,proto3" json:"Cmd,omitempty"`
	Seq            int32             `protobuf:"varint,2,opt,name=Seq,proto3" json:"Seq,omitempty"`
	Time           int64             `protobuf:"varint,3,opt,name=Time,proto3" json:"Time,omitempty"`
	Opts           int64             `protobuf:"varint,4,opt,name=Opts,proto3" json:"Opts,omitempty"`
	RKey           string            `protobuf:"bytes,10,opt,name=RKey,proto3" json:"RKey,omitempty"`
	ClientVer      string            `protobuf:"bytes,11,opt,name=ClientVer,proto3" json:"ClientVer,omitempty"`
	ClientIP       string            `protobuf:"bytes,12,opt,name=ClientIP,proto3" json:"ClientIP,omitempty"`
	Mod            int32             `protobuf:"varint,13,opt,name=Mod,proto3" json:"Mod,omitempty"`
	ReqId          string            `protobuf:"bytes,14,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	Event          bool              `protobuf:"varint,15,opt,name=Event,proto3" json:"Event,omitempty"`
	ClientRevision string            `protobuf:"bytes,16,opt,name=ClientRevision,proto3" json:"ClientRevision,omitempty"`
	FlowID         uint64            `protobuf:"varint,17,opt,name=FlowID,proto3" json:"FlowID,omitempty"`
	Reserved       []byte            `protobuf:"bytes,18,opt,name=Reserved,proto3" json:"Reserved,omitempty"`
	UID            string            `protobuf:"bytes,20,opt,name=UID,proto3" json:"UID,omitempty"`
	TableID        int32             `protobuf:"varint,21,opt,name=TableID,proto3" json:"TableID,omitempty"`
	MetaData       map[string]string `protobuf:"bytes,22,rep,name=MetaData,proto3" json:"MetaData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UseTrace       bool              `protobuf:"varint,23,opt,name=UseTrace,proto3" json:"UseTrace,omitempty"`
	RoleID         string            `protobuf:"bytes,24,opt,name=RoleID,proto3" json:"RoleID,omitempty"`
	//安全网络
	SendID               int64    `protobuf:"varint,25,opt,name=SendID,proto3" json:"SendID,omitempty"`
	AckPeerID            int64    `protobuf:"varint,26,opt,name=AckPeerID,proto3" json:"AckPeerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PacketHead) Reset()         { *m = PacketHead{} }
func (m *PacketHead) String() string { return proto.CompactTextString(m) }
func (*PacketHead) ProtoMessage()    {}
func (*PacketHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4b4e0c9834c6801, []int{0}
}
func (m *PacketHead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketHead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketHead.Merge(m, src)
}
func (m *PacketHead) XXX_Size() int {
	return m.Size()
}
func (m *PacketHead) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketHead.DiscardUnknown(m)
}

var xxx_messageInfo_PacketHead proto.InternalMessageInfo

func (m *PacketHead) GetCmd() int32 {
	if m != nil {
		return m.Cmd
	}
	return 0
}

func (m *PacketHead) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PacketHead) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PacketHead) GetOpts() int64 {
	if m != nil {
		return m.Opts
	}
	return 0
}

func (m *PacketHead) GetRKey() string {
	if m != nil {
		return m.RKey
	}
	return ""
}

func (m *PacketHead) GetClientVer() string {
	if m != nil {
		return m.ClientVer
	}
	return ""
}

func (m *PacketHead) GetClientIP() string {
	if m != nil {
		return m.ClientIP
	}
	return ""
}

func (m *PacketHead) GetMod() int32 {
	if m != nil {
		return m.Mod
	}
	return 0
}

func (m *PacketHead) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *PacketHead) GetEvent() bool {
	if m != nil {
		return m.Event
	}
	return false
}

func (m *PacketHead) GetClientRevision() string {
	if m != nil {
		return m.ClientRevision
	}
	return ""
}

func (m *PacketHead) GetFlowID() uint64 {
	if m != nil {
		return m.FlowID
	}
	return 0
}

func (m *PacketHead) GetReserved() []byte {
	if m != nil {
		return m.Reserved
	}
	return nil
}

func (m *PacketHead) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *PacketHead) GetTableID() int32 {
	if m != nil {
		return m.TableID
	}
	return 0
}

func (m *PacketHead) GetMetaData() map[string]string {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *PacketHead) GetUseTrace() bool {
	if m != nil {
		return m.UseTrace
	}
	return false
}

func (m *PacketHead) GetRoleID() string {
	if m != nil {
		return m.RoleID
	}
	return ""
}

func (m *PacketHead) GetSendID() int64 {
	if m != nil {
		return m.SendID
	}
	return 0
}

func (m *PacketHead) GetAckPeerID() int64 {
	if m != nil {
		return m.AckPeerID
	}
	return 0
}

// Packet 网络层收到的一个帧格式为Packet结构
type Packet struct {
	Head                 *PacketHead `protobuf:"bytes,1,opt,name=Head,proto3" json:"Head,omitempty"`
	Body                 []byte      `protobuf:"bytes,2,opt,name=Body,proto3" json:"Body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Packet) Reset()         { *m = Packet{} }
func (m *Packet) String() string { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()    {}
func (*Packet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4b4e0c9834c6801, []int{1}
}
func (m *Packet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Packet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Packet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Packet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Packet.Merge(m, src)
}
func (m *Packet) XXX_Size() int {
	return m.Size()
}
func (m *Packet) XXX_DiscardUnknown() {
	xxx_messageInfo_Packet.DiscardUnknown(m)
}

var xxx_messageInfo_Packet proto.InternalMessageInfo

func (m *Packet) GetHead() *PacketHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *Packet) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

// RspHead 作为Response的一个通用字段
type RspHead struct {
	Code                 int32    `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	SubCode              int32    `protobuf:"varint,3,opt,name=SubCode,proto3" json:"SubCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RspHead) Reset()         { *m = RspHead{} }
func (m *RspHead) String() string { return proto.CompactTextString(m) }
func (*RspHead) ProtoMessage()    {}
func (*RspHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4b4e0c9834c6801, []int{2}
}
func (m *RspHead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RspHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RspHead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RspHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspHead.Merge(m, src)
}
func (m *RspHead) XXX_Size() int {
	return m.Size()
}
func (m *RspHead) XXX_DiscardUnknown() {
	xxx_messageInfo_RspHead.DiscardUnknown(m)
}

var xxx_messageInfo_RspHead proto.InternalMessageInfo

func (m *RspHead) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RspHead) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RspHead) GetSubCode() int32 {
	if m != nil {
		return m.SubCode
	}
	return 0
}

type CustomErrorRsp struct {
	Head                 *RspHead `protobuf:"bytes,1,opt,name=Head,proto3" json:"Head,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomErrorRsp) Reset()         { *m = CustomErrorRsp{} }
func (m *CustomErrorRsp) String() string { return proto.CompactTextString(m) }
func (*CustomErrorRsp) ProtoMessage()    {}
func (*CustomErrorRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4b4e0c9834c6801, []int{3}
}
func (m *CustomErrorRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomErrorRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomErrorRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomErrorRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomErrorRsp.Merge(m, src)
}
func (m *CustomErrorRsp) XXX_Size() int {
	return m.Size()
}
func (m *CustomErrorRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomErrorRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CustomErrorRsp proto.InternalMessageInfo

func (m *CustomErrorRsp) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

// 公司内部业务调用的通用参数
type InnerServiceCommonParam struct {
	Platform             string   `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	Timestamp            int64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature            string   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	ContentType          string   `protobuf:"bytes,4,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Version              string   `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Channel              string   `protobuf:"bytes,6,opt,name=channel,proto3" json:"channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InnerServiceCommonParam) Reset()         { *m = InnerServiceCommonParam{} }
func (m *InnerServiceCommonParam) String() string { return proto.CompactTextString(m) }
func (*InnerServiceCommonParam) ProtoMessage()    {}
func (*InnerServiceCommonParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4b4e0c9834c6801, []int{4}
}
func (m *InnerServiceCommonParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InnerServiceCommonParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InnerServiceCommonParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InnerServiceCommonParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InnerServiceCommonParam.Merge(m, src)
}
func (m *InnerServiceCommonParam) XXX_Size() int {
	return m.Size()
}
func (m *InnerServiceCommonParam) XXX_DiscardUnknown() {
	xxx_messageInfo_InnerServiceCommonParam.DiscardUnknown(m)
}

var xxx_messageInfo_InnerServiceCommonParam proto.InternalMessageInfo

func (m *InnerServiceCommonParam) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *InnerServiceCommonParam) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *InnerServiceCommonParam) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *InnerServiceCommonParam) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *InnerServiceCommonParam) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *InnerServiceCommonParam) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

//重连
type ReConnReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReConnReq) Reset()         { *m = ReConnReq{} }
func (m *ReConnReq) String() string { return proto.CompactTextString(m) }
func (*ReConnReq) ProtoMessage()    {}
func (*ReConnReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4b4e0c9834c6801, []int{5}
}
func (m *ReConnReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReConnReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReConnReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReConnReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReConnReq.Merge(m, src)
}
func (m *ReConnReq) XXX_Size() int {
	return m.Size()
}
func (m *ReConnReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReConnReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReConnReq proto.InternalMessageInfo

type ReConnRsp struct {
	Head                 *RspHead  `protobuf:"bytes,1,opt,name=Head,proto3" json:"Head,omitempty"`
	RspList              []*Packet `protobuf:"bytes,2,rep,name=RspList,proto3" json:"RspList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ReConnRsp) Reset()         { *m = ReConnRsp{} }
func (m *ReConnRsp) String() string { return proto.CompactTextString(m) }
func (*ReConnRsp) ProtoMessage()    {}
func (*ReConnRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4b4e0c9834c6801, []int{6}
}
func (m *ReConnRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReConnRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReConnRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReConnRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReConnRsp.Merge(m, src)
}
func (m *ReConnRsp) XXX_Size() int {
	return m.Size()
}
func (m *ReConnRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReConnRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ReConnRsp proto.InternalMessageInfo

func (m *ReConnRsp) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *ReConnRsp) GetRspList() []*Packet {
	if m != nil {
		return m.RspList
	}
	return nil
}

//配置变更通知
type ConfigMD5Notify struct {
	ConfigMD5            string   `protobuf:"bytes,1,opt,name=ConfigMD5,proto3" json:"ConfigMD5,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigMD5Notify) Reset()         { *m = ConfigMD5Notify{} }
func (m *ConfigMD5Notify) String() string { return proto.CompactTextString(m) }
func (*ConfigMD5Notify) ProtoMessage()    {}
func (*ConfigMD5Notify) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4b4e0c9834c6801, []int{7}
}
func (m *ConfigMD5Notify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigMD5Notify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigMD5Notify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigMD5Notify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigMD5Notify.Merge(m, src)
}
func (m *ConfigMD5Notify) XXX_Size() int {
	return m.Size()
}
func (m *ConfigMD5Notify) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigMD5Notify.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigMD5Notify proto.InternalMessageInfo

func (m *ConfigMD5Notify) GetConfigMD5() string {
	if m != nil {
		return m.ConfigMD5
	}
	return ""
}

func init() {
	proto.RegisterType((*PacketHead)(nil), "forevernine.base.proto.PacketHead")
	proto.RegisterMapType((map[string]string)(nil), "forevernine.base.proto.PacketHead.MetaDataEntry")
	proto.RegisterType((*Packet)(nil), "forevernine.base.proto.Packet")
	proto.RegisterType((*RspHead)(nil), "forevernine.base.proto.RspHead")
	proto.RegisterType((*CustomErrorRsp)(nil), "forevernine.base.proto.CustomErrorRsp")
	proto.RegisterType((*InnerServiceCommonParam)(nil), "forevernine.base.proto.InnerServiceCommonParam")
	proto.RegisterType((*ReConnReq)(nil), "forevernine.base.proto.ReConnReq")
	proto.RegisterType((*ReConnRsp)(nil), "forevernine.base.proto.ReConnRsp")
	proto.RegisterType((*ConfigMD5Notify)(nil), "forevernine.base.proto.ConfigMD5Notify")
}

func init() { proto.RegisterFile("base_packet.proto", fileDescriptor_d4b4e0c9834c6801) }

var fileDescriptor_d4b4e0c9834c6801 = []byte{
	// 708 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x6f, 0x1a, 0x49,
	0x10, 0xf5, 0x18, 0x8c, 0x4d, 0x83, 0xbf, 0x5a, 0x5e, 0xbb, 0xd7, 0x5a, 0xb1, 0xec, 0x1c, 0x56,
	0x73, 0x82, 0x95, 0xad, 0x5d, 0x59, 0x9b, 0x53, 0x0c, 0x44, 0x19, 0xc5, 0x24, 0xa8, 0xc1, 0x39,
	0xe4, 0x62, 0x0d, 0x4c, 0x41, 0x46, 0x66, 0xba, 0x87, 0x9e, 0x86, 0x88, 0xfc, 0x42, 0x1f, 0xfd,
	0x13, 0x62, 0x4e, 0x39, 0xe6, 0x27, 0x44, 0x5d, 0x3d, 0x40, 0x1c, 0xe5, 0x43, 0xca, 0xad, 0xde,
	0xab, 0xea, 0x9e, 0x57, 0xf5, 0x6a, 0x9a, 0x1c, 0xf6, 0x83, 0x14, 0x6e, 0x92, 0x60, 0x70, 0x0b,
	0xba, 0x96, 0x28, 0xa9, 0x25, 0x3d, 0x1e, 0x4a, 0x05, 0x33, 0x50, 0x22, 0x12, 0x50, 0x33, 0x69,
	0xcb, 0xbb, 0x0f, 0x79, 0x42, 0x3a, 0x58, 0xf8, 0x1c, 0x82, 0x90, 0x1e, 0x90, 0x5c, 0x23, 0x0e,
	0x99, 0x53, 0x75, 0xbc, 0x2d, 0x6e, 0x42, 0xc3, 0x74, 0x61, 0xc2, 0x36, 0x2d, 0xd3, 0x85, 0x09,
	0xa5, 0x24, 0xdf, 0x8b, 0x62, 0x60, 0xb9, 0xaa, 0xe3, 0xe5, 0x38, 0xc6, 0x86, 0x7b, 0x95, 0xe8,
	0x94, 0xe5, 0x2d, 0x67, 0x62, 0xc3, 0xf1, 0x17, 0x30, 0x67, 0xa4, 0xea, 0x78, 0x45, 0x8e, 0x31,
	0xfd, 0x83, 0x14, 0x1b, 0xe3, 0x08, 0x84, 0x7e, 0x0d, 0x8a, 0x95, 0x30, 0xb1, 0x26, 0xe8, 0x29,
	0xd9, 0xb1, 0xc0, 0xef, 0xb0, 0x32, 0x26, 0x57, 0xd8, 0xe8, 0x68, 0xcb, 0x90, 0xed, 0x5a, 0x1d,
	0x6d, 0x19, 0xd2, 0x23, 0xb2, 0xc5, 0x61, 0xe2, 0x87, 0x6c, 0x0f, 0x4b, 0x2d, 0x30, 0x6c, 0x6b,
	0x06, 0x42, 0xb3, 0xfd, 0xaa, 0xe3, 0xed, 0x70, 0x0b, 0xe8, 0xdf, 0x64, 0xcf, 0xde, 0xc4, 0x61,
	0x16, 0xa5, 0x91, 0x14, 0xec, 0x00, 0x0f, 0x7d, 0xc5, 0xd2, 0x63, 0x52, 0x78, 0x36, 0x96, 0xef,
	0xfc, 0x26, 0x3b, 0xac, 0x3a, 0x5e, 0x9e, 0x67, 0xc8, 0x28, 0xe3, 0x90, 0x82, 0x9a, 0x41, 0xc8,
	0x68, 0xd5, 0xf1, 0xca, 0x7c, 0x85, 0x8d, 0xb2, 0x6b, 0xbf, 0xc9, 0x8e, 0xf0, 0x42, 0x13, 0x52,
	0x46, 0xb6, 0x7b, 0x41, 0x7f, 0x0c, 0x7e, 0x93, 0xfd, 0x86, 0x7a, 0x97, 0x90, 0x5e, 0x91, 0x9d,
	0x36, 0xe8, 0xa0, 0x19, 0xe8, 0x80, 0x1d, 0x57, 0x73, 0x5e, 0xe9, 0xec, 0x9f, 0xda, 0xb7, 0x9d,
	0xa9, 0xad, 0x5d, 0xa9, 0x2d, 0x8f, 0xb4, 0x84, 0x56, 0x73, 0xbe, 0xba, 0xc1, 0xa8, 0xba, 0x4e,
	0xa1, 0xa7, 0x82, 0x01, 0xb0, 0x13, 0x6c, 0x77, 0x85, 0x4d, 0x27, 0x5c, 0xa2, 0x04, 0x86, 0xc2,
	0x32, 0x64, 0xf8, 0x2e, 0x88, 0xd0, 0x6f, 0xb2, 0xdf, 0xd1, 0xab, 0x0c, 0x19, 0x67, 0x9e, 0x0e,
	0x6e, 0x3b, 0x00, 0xca, 0x6f, 0xb2, 0x53, 0x4c, 0xad, 0x89, 0xd3, 0x27, 0x64, 0xf7, 0x91, 0x08,
	0xd3, 0xf4, 0x2d, 0xcc, 0x71, 0x51, 0x8a, 0xdc, 0x84, 0x66, 0xf0, 0xb3, 0x60, 0x3c, 0x05, 0x5c,
	0x95, 0x22, 0xb7, 0xe0, 0xff, 0xcd, 0x0b, 0xc7, 0xed, 0x91, 0x82, 0x6d, 0x86, 0xfe, 0x47, 0xf2,
	0xa6, 0x21, 0x3c, 0x56, 0x3a, 0x73, 0x7f, 0xde, 0x3a, 0xc7, 0x7a, 0xb3, 0x4a, 0x97, 0x32, 0x9c,
	0xe3, 0xd5, 0x65, 0x8e, 0xb1, 0xeb, 0x93, 0x6d, 0x9e, 0x26, 0xcb, 0x74, 0x43, 0x86, 0x90, 0xad,
	0x2d, 0xc6, 0xb8, 0x2f, 0xe9, 0x28, 0x13, 0x63, 0x42, 0xe3, 0x4a, 0x77, 0xda, 0xc7, 0xc2, 0x9c,
	0x75, 0x25, 0x83, 0x6e, 0x8b, 0xec, 0x35, 0xa6, 0xa9, 0x96, 0x71, 0x4b, 0x29, 0xa9, 0x78, 0x9a,
	0xd0, 0xf3, 0x47, 0x42, 0xff, 0xfc, 0x9e, 0xd0, 0x4c, 0x80, 0x55, 0xe9, 0xde, 0x39, 0xe4, 0xc4,
	0x17, 0x02, 0x54, 0x17, 0xd4, 0x2c, 0x1a, 0x40, 0x43, 0xc6, 0xb1, 0x14, 0x9d, 0x40, 0x05, 0xb1,
	0xb1, 0x2a, 0x19, 0x07, 0x7a, 0x28, 0x55, 0x9c, 0x0d, 0x6d, 0x85, 0xcd, 0xe8, 0x75, 0x14, 0x43,
	0xaa, 0x83, 0x38, 0x41, 0xc1, 0x39, 0xbe, 0x26, 0x4c, 0x36, 0x8d, 0x46, 0x22, 0xd0, 0x53, 0x65,
	0x85, 0x17, 0xf9, 0x9a, 0xa0, 0x7f, 0x91, 0xf2, 0x40, 0x0a, 0x0d, 0x42, 0xdf, 0xe8, 0x79, 0x02,
	0xf8, 0x03, 0x16, 0x79, 0x29, 0xe3, 0x7a, 0xf3, 0x04, 0x4c, 0xdf, 0x33, 0x50, 0xb8, 0xf4, 0x5b,
	0x98, 0x5d, 0x42, 0x93, 0x19, 0xbc, 0x0d, 0x84, 0x80, 0x31, 0x2b, 0xd8, 0x4c, 0x06, 0xdd, 0x12,
	0x29, 0x72, 0x68, 0x48, 0x21, 0x38, 0x4c, 0xdc, 0xf7, 0x2b, 0xf0, 0x8b, 0x93, 0xa1, 0x17, 0xe8,
	0xd5, 0x55, 0x94, 0x6a, 0xb6, 0x89, 0x5b, 0x5f, 0xf9, 0xb1, 0xf5, 0x7c, 0x59, 0xee, 0xd6, 0xc9,
	0x7e, 0x43, 0x8a, 0x61, 0x34, 0x6a, 0x37, 0xff, 0x7d, 0x29, 0x75, 0x34, 0xb4, 0x6f, 0xc8, 0x92,
	0xca, 0x66, 0xb9, 0x26, 0x2e, 0x2f, 0xef, 0x1f, 0x2a, 0x1b, 0x77, 0x8b, 0x8a, 0x73, 0xbf, 0xa8,
	0x38, 0x1f, 0x16, 0x15, 0xe7, 0xe3, 0xa2, 0xb2, 0xf1, 0x69, 0x51, 0x71, 0xde, 0x78, 0x5f, 0x7e,
	0x72, 0x20, 0xe3, 0x7a, 0x1c, 0x85, 0xc6, 0x83, 0xba, 0x7d, 0x2d, 0xcd, 0xe7, 0xeb, 0x23, 0x59,
	0x4f, 0xfa, 0xfd, 0x02, 0x82, 0xf3, 0xcf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x14, 0x5a, 0xb8, 0xfe,
	0x48, 0x05, 0x00, 0x00,
}

func (m *PacketHead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketHead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketHead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AckPeerID != 0 {
		i = encodeVarintBasePacket(dAtA, i, uint64(m.AckPeerID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.SendID != 0 {
		i = encodeVarintBasePacket(dAtA, i, uint64(m.SendID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.RoleID) > 0 {
		i -= len(m.RoleID)
		copy(dAtA[i:], m.RoleID)
		i = encodeVarintBasePacket(dAtA, i, uint64(len(m.RoleID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.UseTrace {
		i--
		if m.UseTrace {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if len(m.MetaData) > 0 {
		for k := range m.MetaData {
			v := m.MetaData[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBasePacket(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBasePacket(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBasePacket(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.TableID != 0 {
		i = encodeVarintBasePacket(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintBasePacket(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Reserved) > 0 {
		i -= len(m.Reserved)
		copy(dAtA[i:], m.Reserved)
		i = encodeVarintBasePacket(dAtA, i, uint64(len(m.Reserved)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.FlowID != 0 {
		i = encodeVarintBasePacket(dAtA, i, uint64(m.FlowID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.ClientRevision) > 0 {
		i -= len(m.ClientRevision)
		copy(dAtA[i:], m.ClientRevision)
		i = encodeVarintBasePacket(dAtA, i, uint64(len(m.ClientRevision)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Event {
		i--
		if m.Event {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if len(m.ReqId) > 0 {
		i -= len(m.ReqId)
		copy(dAtA[i:], m.ReqId)
		i = encodeVarintBasePacket(dAtA, i, uint64(len(m.ReqId)))
		i--
		dAtA[i] = 0x72
	}
	if m.Mod != 0 {
		i = encodeVarintBasePacket(dAtA, i, uint64(m.Mod))
		i--
		dAtA[i] = 0x68
	}
	if len(m.ClientIP) > 0 {
		i -= len(m.ClientIP)
		copy(dAtA[i:], m.ClientIP)
		i = encodeVarintBasePacket(dAtA, i, uint64(len(m.ClientIP)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ClientVer) > 0 {
		i -= len(m.ClientVer)
		copy(dAtA[i:], m.ClientVer)
		i = encodeVarintBasePacket(dAtA, i, uint64(len(m.ClientVer)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.RKey) > 0 {
		i -= len(m.RKey)
		copy(dAtA[i:], m.RKey)
		i = encodeVarintBasePacket(dAtA, i, uint64(len(m.RKey)))
		i--
		dAtA[i] = 0x52
	}
	if m.Opts != 0 {
		i = encodeVarintBasePacket(dAtA, i, uint64(m.Opts))
		i--
		dAtA[i] = 0x20
	}
	if m.Time != 0 {
		i = encodeVarintBasePacket(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x18
	}
	if m.Seq != 0 {
		i = encodeVarintBasePacket(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x10
	}
	if m.Cmd != 0 {
		i = encodeVarintBasePacket(dAtA, i, uint64(m.Cmd))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Packet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Packet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Packet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintBasePacket(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x12
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBasePacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RspHead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RspHead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RspHead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SubCode != 0 {
		i = encodeVarintBasePacket(dAtA, i, uint64(m.SubCode))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintBasePacket(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintBasePacket(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CustomErrorRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomErrorRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomErrorRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBasePacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InnerServiceCommonParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InnerServiceCommonParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InnerServiceCommonParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintBasePacket(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintBasePacket(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintBasePacket(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintBasePacket(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintBasePacket(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintBasePacket(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReConnReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReConnReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReConnReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ReConnRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReConnRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReConnRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RspList) > 0 {
		for iNdEx := len(m.RspList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RspList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBasePacket(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBasePacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigMD5Notify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigMD5Notify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigMD5Notify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConfigMD5) > 0 {
		i -= len(m.ConfigMD5)
		copy(dAtA[i:], m.ConfigMD5)
		i = encodeVarintBasePacket(dAtA, i, uint64(len(m.ConfigMD5)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBasePacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovBasePacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PacketHead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cmd != 0 {
		n += 1 + sovBasePacket(uint64(m.Cmd))
	}
	if m.Seq != 0 {
		n += 1 + sovBasePacket(uint64(m.Seq))
	}
	if m.Time != 0 {
		n += 1 + sovBasePacket(uint64(m.Time))
	}
	if m.Opts != 0 {
		n += 1 + sovBasePacket(uint64(m.Opts))
	}
	l = len(m.RKey)
	if l > 0 {
		n += 1 + l + sovBasePacket(uint64(l))
	}
	l = len(m.ClientVer)
	if l > 0 {
		n += 1 + l + sovBasePacket(uint64(l))
	}
	l = len(m.ClientIP)
	if l > 0 {
		n += 1 + l + sovBasePacket(uint64(l))
	}
	if m.Mod != 0 {
		n += 1 + sovBasePacket(uint64(m.Mod))
	}
	l = len(m.ReqId)
	if l > 0 {
		n += 1 + l + sovBasePacket(uint64(l))
	}
	if m.Event {
		n += 2
	}
	l = len(m.ClientRevision)
	if l > 0 {
		n += 2 + l + sovBasePacket(uint64(l))
	}
	if m.FlowID != 0 {
		n += 2 + sovBasePacket(uint64(m.FlowID))
	}
	l = len(m.Reserved)
	if l > 0 {
		n += 2 + l + sovBasePacket(uint64(l))
	}
	l = len(m.UID)
	if l > 0 {
		n += 2 + l + sovBasePacket(uint64(l))
	}
	if m.TableID != 0 {
		n += 2 + sovBasePacket(uint64(m.TableID))
	}
	if len(m.MetaData) > 0 {
		for k, v := range m.MetaData {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBasePacket(uint64(len(k))) + 1 + len(v) + sovBasePacket(uint64(len(v)))
			n += mapEntrySize + 2 + sovBasePacket(uint64(mapEntrySize))
		}
	}
	if m.UseTrace {
		n += 3
	}
	l = len(m.RoleID)
	if l > 0 {
		n += 2 + l + sovBasePacket(uint64(l))
	}
	if m.SendID != 0 {
		n += 2 + sovBasePacket(uint64(m.SendID))
	}
	if m.AckPeerID != 0 {
		n += 2 + sovBasePacket(uint64(m.AckPeerID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Packet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovBasePacket(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovBasePacket(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RspHead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBasePacket(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovBasePacket(uint64(l))
	}
	if m.SubCode != 0 {
		n += 1 + sovBasePacket(uint64(m.SubCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomErrorRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovBasePacket(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InnerServiceCommonParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovBasePacket(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovBasePacket(uint64(m.Timestamp))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovBasePacket(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovBasePacket(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovBasePacket(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovBasePacket(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReConnReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReConnRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovBasePacket(uint64(l))
	}
	if len(m.RspList) > 0 {
		for _, e := range m.RspList {
			l = e.Size()
			n += 1 + l + sovBasePacket(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigMD5Notify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConfigMD5)
	if l > 0 {
		n += 1 + l + sovBasePacket(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBasePacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBasePacket(x uint64) (n int) {
	return sovBasePacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PacketHead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasePacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketHead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketHead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			m.Cmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmd |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opts", wireType)
			}
			m.Opts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Opts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mod", wireType)
			}
			m.Mod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mod |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Event = bool(v != 0)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientRevision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientRevision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowID", wireType)
			}
			m.FlowID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserved = append(m.Reserved[:0], dAtA[iNdEx:postIndex]...)
			if m.Reserved == nil {
				m.Reserved = []byte{}
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetaData == nil {
				m.MetaData = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBasePacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBasePacket
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBasePacket
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBasePacket
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBasePacket
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBasePacket
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBasePacket
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBasePacket(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBasePacket
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MetaData[mapkey] = mapvalue
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTrace", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseTrace = bool(v != 0)
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendID", wireType)
			}
			m.SendID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckPeerID", wireType)
			}
			m.AckPeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckPeerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBasePacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasePacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Packet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasePacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Packet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Packet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &PacketHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasePacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasePacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RspHead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasePacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RspHead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RspHead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubCode", wireType)
			}
			m.SubCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBasePacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasePacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomErrorRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasePacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomErrorRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomErrorRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RspHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasePacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasePacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InnerServiceCommonParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasePacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InnerServiceCommonParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InnerServiceCommonParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasePacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasePacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReConnReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasePacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReConnReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReConnReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBasePacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasePacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReConnRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasePacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReConnRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReConnRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RspHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RspList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RspList = append(m.RspList, &Packet{})
			if err := m.RspList[len(m.RspList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasePacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasePacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigMD5Notify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasePacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigMD5Notify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigMD5Notify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigMD5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasePacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigMD5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasePacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasePacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBasePacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBasePacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBasePacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBasePacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBasePacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBasePacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBasePacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBasePacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBasePacket = fmt.Errorf("proto: unexpected end of group")
)
