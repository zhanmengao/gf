// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: base_packet_server.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OamSetStatusReq struct {
	Status               int32    `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OamSetStatusReq) Reset()         { *m = OamSetStatusReq{} }
func (m *OamSetStatusReq) String() string { return proto.CompactTextString(m) }
func (*OamSetStatusReq) ProtoMessage()    {}
func (*OamSetStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f34ddf49783ab08, []int{0}
}
func (m *OamSetStatusReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OamSetStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OamSetStatusReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OamSetStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OamSetStatusReq.Merge(m, src)
}
func (m *OamSetStatusReq) XXX_Size() int {
	return m.Size()
}
func (m *OamSetStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OamSetStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_OamSetStatusReq proto.InternalMessageInfo

func (m *OamSetStatusReq) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type OamGetStatusRsp struct {
	Status               int32    `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Ready                bool     `protobuf:"varint,2,opt,name=Ready,proto3" json:"Ready,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OamGetStatusRsp) Reset()         { *m = OamGetStatusRsp{} }
func (m *OamGetStatusRsp) String() string { return proto.CompactTextString(m) }
func (*OamGetStatusRsp) ProtoMessage()    {}
func (*OamGetStatusRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f34ddf49783ab08, []int{1}
}
func (m *OamGetStatusRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OamGetStatusRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OamGetStatusRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OamGetStatusRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OamGetStatusRsp.Merge(m, src)
}
func (m *OamGetStatusRsp) XXX_Size() int {
	return m.Size()
}
func (m *OamGetStatusRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_OamGetStatusRsp.DiscardUnknown(m)
}

var xxx_messageInfo_OamGetStatusRsp proto.InternalMessageInfo

func (m *OamGetStatusRsp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *OamGetStatusRsp) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

//踢人
type GateKickUserReq struct {
	UID                  string   `protobuf:"bytes,1,opt,name=UID,proto3" json:"UID,omitempty"`
	DeviceToken          string   `protobuf:"bytes,2,opt,name=DeviceToken,proto3" json:"DeviceToken,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GateKickUserReq) Reset()         { *m = GateKickUserReq{} }
func (m *GateKickUserReq) String() string { return proto.CompactTextString(m) }
func (*GateKickUserReq) ProtoMessage()    {}
func (*GateKickUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f34ddf49783ab08, []int{2}
}
func (m *GateKickUserReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GateKickUserReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GateKickUserReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GateKickUserReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GateKickUserReq.Merge(m, src)
}
func (m *GateKickUserReq) XXX_Size() int {
	return m.Size()
}
func (m *GateKickUserReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GateKickUserReq.DiscardUnknown(m)
}

var xxx_messageInfo_GateKickUserReq proto.InternalMessageInfo

func (m *GateKickUserReq) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *GateKickUserReq) GetDeviceToken() string {
	if m != nil {
		return m.DeviceToken
	}
	return ""
}

//推送
type NotifyToUserReq struct {
	Broadcast            bool     `protobuf:"varint,1,opt,name=Broadcast,proto3" json:"Broadcast,omitempty"`
	UIDList              []string `protobuf:"bytes,2,rep,name=UIDList,proto3" json:"UIDList,omitempty"`
	CMD                  int32    `protobuf:"varint,3,opt,name=CMD,proto3" json:"CMD,omitempty"`
	Data                 []byte   `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyToUserReq) Reset()         { *m = NotifyToUserReq{} }
func (m *NotifyToUserReq) String() string { return proto.CompactTextString(m) }
func (*NotifyToUserReq) ProtoMessage()    {}
func (*NotifyToUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f34ddf49783ab08, []int{3}
}
func (m *NotifyToUserReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyToUserReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyToUserReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyToUserReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyToUserReq.Merge(m, src)
}
func (m *NotifyToUserReq) XXX_Size() int {
	return m.Size()
}
func (m *NotifyToUserReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyToUserReq.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyToUserReq proto.InternalMessageInfo

func (m *NotifyToUserReq) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

func (m *NotifyToUserReq) GetUIDList() []string {
	if m != nil {
		return m.UIDList
	}
	return nil
}

func (m *NotifyToUserReq) GetCMD() int32 {
	if m != nil {
		return m.CMD
	}
	return 0
}

func (m *NotifyToUserReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type NotifyToUserRsp struct {
	Head                 *RspHead `protobuf:"bytes,1,opt,name=Head,proto3" json:"Head,omitempty"`
	SendFailUID          []string `protobuf:"bytes,2,rep,name=SendFailUID,proto3" json:"SendFailUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyToUserRsp) Reset()         { *m = NotifyToUserRsp{} }
func (m *NotifyToUserRsp) String() string { return proto.CompactTextString(m) }
func (*NotifyToUserRsp) ProtoMessage()    {}
func (*NotifyToUserRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f34ddf49783ab08, []int{4}
}
func (m *NotifyToUserRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyToUserRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyToUserRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyToUserRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyToUserRsp.Merge(m, src)
}
func (m *NotifyToUserRsp) XXX_Size() int {
	return m.Size()
}
func (m *NotifyToUserRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyToUserRsp.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyToUserRsp proto.InternalMessageInfo

func (m *NotifyToUserRsp) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *NotifyToUserRsp) GetSendFailUID() []string {
	if m != nil {
		return m.SendFailUID
	}
	return nil
}

func init() {
	proto.RegisterType((*OamSetStatusReq)(nil), "forevernine.base.proto.OamSetStatusReq")
	proto.RegisterType((*OamGetStatusRsp)(nil), "forevernine.base.proto.OamGetStatusRsp")
	proto.RegisterType((*GateKickUserReq)(nil), "forevernine.base.proto.GateKickUserReq")
	proto.RegisterType((*NotifyToUserReq)(nil), "forevernine.base.proto.NotifyToUserReq")
	proto.RegisterType((*NotifyToUserRsp)(nil), "forevernine.base.proto.NotifyToUserRsp")
}

func init() { proto.RegisterFile("base_packet_server.proto", fileDescriptor_2f34ddf49783ab08) }

var fileDescriptor_2f34ddf49783ab08 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcf, 0x4a, 0xeb, 0x40,
	0x14, 0xc6, 0x3b, 0xfd, 0x77, 0x9b, 0xe9, 0x85, 0xde, 0x3b, 0x5c, 0x4a, 0xb8, 0x48, 0x0c, 0x59,
	0xc5, 0x4d, 0x02, 0xf6, 0x01, 0x84, 0x1a, 0xad, 0xc5, 0x7f, 0x30, 0x6d, 0x37, 0x6e, 0xca, 0x34,
	0x39, 0xd5, 0xd0, 0x36, 0x13, 0x33, 0x63, 0xa1, 0x6f, 0xe8, 0xb2, 0x8f, 0xa0, 0x59, 0xb9, 0xf4,
	0x11, 0x64, 0x26, 0x56, 0x83, 0xe8, 0xee, 0x7c, 0x1f, 0xdf, 0x39, 0xbf, 0x73, 0x66, 0xb0, 0x39,
	0x63, 0x02, 0xa6, 0x29, 0x0b, 0x17, 0x20, 0xa7, 0x02, 0xb2, 0x35, 0x64, 0x5e, 0x9a, 0x71, 0xc9,
	0x49, 0x77, 0xce, 0x33, 0x58, 0x43, 0x96, 0xc4, 0x09, 0x78, 0x2a, 0x55, 0xf8, 0xff, 0xff, 0x96,
	0x3a, 0x0a, 0xcb, 0x39, 0xc0, 0x9d, 0x6b, 0xb6, 0x1a, 0x81, 0x1c, 0x49, 0x26, 0x1f, 0x04, 0x85,
	0x7b, 0xd2, 0xc5, 0xcd, 0x42, 0x98, 0xc8, 0x46, 0x6e, 0x83, 0xbe, 0x2b, 0xe7, 0x48, 0x47, 0x07,
	0x1f, 0x51, 0x91, 0xfe, 0x14, 0x25, 0xff, 0x70, 0x83, 0x02, 0x8b, 0x36, 0x66, 0xd5, 0x46, 0x6e,
	0x8b, 0x16, 0xc2, 0x39, 0xc1, 0x9d, 0x01, 0x93, 0x70, 0x1e, 0x87, 0x8b, 0x89, 0x80, 0x4c, 0xb1,
	0xfe, 0xe0, 0xda, 0x64, 0x18, 0xe8, 0x6e, 0x83, 0xaa, 0x92, 0xd8, 0xb8, 0x1d, 0xc0, 0x3a, 0x0e,
	0x61, 0xcc, 0x17, 0x90, 0xe8, 0x01, 0x06, 0x2d, 0x5b, 0x0e, 0xc7, 0x9d, 0x2b, 0x2e, 0xe3, 0xf9,
	0x66, 0xcc, 0x77, 0x63, 0xf6, 0xb0, 0xd1, 0xcf, 0x38, 0x8b, 0x42, 0x26, 0xa4, 0x1e, 0xd6, 0xa2,
	0x9f, 0x06, 0x31, 0xf1, 0xaf, 0xc9, 0x30, 0xb8, 0x88, 0x85, 0x34, 0xab, 0x76, 0xcd, 0x35, 0xe8,
	0x4e, 0x2a, 0xfc, 0xf1, 0x65, 0x60, 0xd6, 0xf4, 0xf2, 0xaa, 0x24, 0x04, 0xd7, 0x03, 0x26, 0x99,
	0x59, 0xb7, 0x91, 0xfb, 0x9b, 0xea, 0xda, 0xb9, 0xfb, 0x02, 0x14, 0x29, 0xe9, 0xe1, 0xfa, 0x19,
	0xb0, 0x48, 0xb3, 0xda, 0x87, 0xfb, 0xde, 0xf7, 0x0f, 0xee, 0x51, 0x91, 0xaa, 0x18, 0xd5, 0x61,
	0x75, 0xda, 0x08, 0x92, 0xe8, 0x94, 0xc5, 0x4b, 0x75, 0x74, 0xb1, 0x4b, 0xd9, 0xea, 0xf7, 0xb7,
	0xcf, 0x56, 0xe5, 0x31, 0xb7, 0xd0, 0x36, 0xb7, 0xd0, 0x53, 0x6e, 0xa1, 0x97, 0xdc, 0xaa, 0xbc,
	0xe6, 0x16, 0xba, 0x71, 0xcb, 0x84, 0x90, 0xaf, 0xfc, 0x55, 0x1c, 0xa5, 0x4b, 0x26, 0xfd, 0xe2,
	0x4b, 0x15, 0xcd, 0xbf, 0xe5, 0x7e, 0x3a, 0x9b, 0x35, 0xb5, 0xe8, 0xbd, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x2d, 0xe6, 0x11, 0x22, 0x1f, 0x02, 0x00, 0x00,
}

func (m *OamSetStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OamSetStatusReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OamSetStatusReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintBasePacketServer(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OamGetStatusRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OamGetStatusRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OamGetStatusRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ready {
		i--
		if m.Ready {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintBasePacketServer(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GateKickUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GateKickUserReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GateKickUserReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeviceToken) > 0 {
		i -= len(m.DeviceToken)
		copy(dAtA[i:], m.DeviceToken)
		i = encodeVarintBasePacketServer(dAtA, i, uint64(len(m.DeviceToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintBasePacketServer(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyToUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyToUserReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyToUserReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintBasePacketServer(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if m.CMD != 0 {
		i = encodeVarintBasePacketServer(dAtA, i, uint64(m.CMD))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UIDList) > 0 {
		for iNdEx := len(m.UIDList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UIDList[iNdEx])
			copy(dAtA[i:], m.UIDList[iNdEx])
			i = encodeVarintBasePacketServer(dAtA, i, uint64(len(m.UIDList[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Broadcast {
		i--
		if m.Broadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyToUserRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyToUserRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyToUserRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SendFailUID) > 0 {
		for iNdEx := len(m.SendFailUID) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SendFailUID[iNdEx])
			copy(dAtA[i:], m.SendFailUID[iNdEx])
			i = encodeVarintBasePacketServer(dAtA, i, uint64(len(m.SendFailUID[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBasePacketServer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBasePacketServer(dAtA []byte, offset int, v uint64) int {
	offset -= sovBasePacketServer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OamSetStatusReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovBasePacketServer(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OamGetStatusRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovBasePacketServer(uint64(m.Status))
	}
	if m.Ready {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GateKickUserReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovBasePacketServer(uint64(l))
	}
	l = len(m.DeviceToken)
	if l > 0 {
		n += 1 + l + sovBasePacketServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyToUserReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Broadcast {
		n += 2
	}
	if len(m.UIDList) > 0 {
		for _, s := range m.UIDList {
			l = len(s)
			n += 1 + l + sovBasePacketServer(uint64(l))
		}
	}
	if m.CMD != 0 {
		n += 1 + sovBasePacketServer(uint64(m.CMD))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovBasePacketServer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NotifyToUserRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovBasePacketServer(uint64(l))
	}
	if len(m.SendFailUID) > 0 {
		for _, s := range m.SendFailUID {
			l = len(s)
			n += 1 + l + sovBasePacketServer(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBasePacketServer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBasePacketServer(x uint64) (n int) {
	return sovBasePacketServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OamSetStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasePacketServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OamSetStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OamSetStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacketServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBasePacketServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasePacketServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OamGetStatusRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasePacketServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OamGetStatusRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OamGetStatusRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacketServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacketServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ready = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBasePacketServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasePacketServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateKickUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasePacketServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateKickUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateKickUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacketServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasePacketServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacketServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacketServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasePacketServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacketServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasePacketServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasePacketServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyToUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasePacketServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyToUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyToUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacketServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Broadcast = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UIDList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacketServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasePacketServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacketServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UIDList = append(m.UIDList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CMD", wireType)
			}
			m.CMD = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacketServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CMD |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacketServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBasePacketServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacketServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasePacketServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasePacketServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyToUserRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasePacketServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyToUserRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyToUserRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacketServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBasePacketServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacketServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RspHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendFailUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasePacketServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasePacketServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasePacketServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendFailUID = append(m.SendFailUID, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasePacketServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasePacketServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBasePacketServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBasePacketServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBasePacketServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBasePacketServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBasePacketServer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBasePacketServer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBasePacketServer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBasePacketServer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBasePacketServer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBasePacketServer = fmt.Errorf("proto: unexpected end of group")
)
