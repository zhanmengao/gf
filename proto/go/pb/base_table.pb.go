// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: base_table.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 热更
type PatchConfig struct {
	Version              string            `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	Device               string            `protobuf:"bytes,2,opt,name=Device,proto3" json:"Device,omitempty"`
	ConfigMD5            string            `protobuf:"bytes,3,opt,name=ConfigMD5,proto3" json:"ConfigMD5,omitempty"`
	ForceUpdate          bool              `protobuf:"varint,4,opt,name=ForceUpdate,proto3" json:"ForceUpdate,omitempty"`
	OnlyUpdateCode       bool              `protobuf:"varint,5,opt,name=OnlyUpdateCode,proto3" json:"OnlyUpdateCode,omitempty"`
	PatchType            PATCH_UPDATE_TYPE `protobuf:"varint,6,opt,name=PatchType,proto3,enum=forevernine.base.proto.PATCH_UPDATE_TYPE" json:"PatchType,omitempty"`
	Channel              string            `protobuf:"bytes,7,opt,name=Channel,proto3" json:"Channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PatchConfig) Reset()         { *m = PatchConfig{} }
func (m *PatchConfig) String() string { return proto.CompactTextString(m) }
func (*PatchConfig) ProtoMessage()    {}
func (*PatchConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_14021c854b2ee09a, []int{0}
}
func (m *PatchConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PatchConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PatchConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PatchConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatchConfig.Merge(m, src)
}
func (m *PatchConfig) XXX_Size() int {
	return m.Size()
}
func (m *PatchConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PatchConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PatchConfig proto.InternalMessageInfo

func (m *PatchConfig) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *PatchConfig) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *PatchConfig) GetConfigMD5() string {
	if m != nil {
		return m.ConfigMD5
	}
	return ""
}

func (m *PatchConfig) GetForceUpdate() bool {
	if m != nil {
		return m.ForceUpdate
	}
	return false
}

func (m *PatchConfig) GetOnlyUpdateCode() bool {
	if m != nil {
		return m.OnlyUpdateCode
	}
	return false
}

func (m *PatchConfig) GetPatchType() PATCH_UPDATE_TYPE {
	if m != nil {
		return m.PatchType
	}
	return PATCH_UPDATE_LAST_LOGIN
}

func (m *PatchConfig) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

type PatchConfigAry struct {
	Ary                  []*PatchConfig `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PatchConfigAry) Reset()         { *m = PatchConfigAry{} }
func (m *PatchConfigAry) String() string { return proto.CompactTextString(m) }
func (*PatchConfigAry) ProtoMessage()    {}
func (*PatchConfigAry) Descriptor() ([]byte, []int) {
	return fileDescriptor_14021c854b2ee09a, []int{1}
}
func (m *PatchConfigAry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PatchConfigAry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PatchConfigAry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PatchConfigAry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatchConfigAry.Merge(m, src)
}
func (m *PatchConfigAry) XXX_Size() int {
	return m.Size()
}
func (m *PatchConfigAry) XXX_DiscardUnknown() {
	xxx_messageInfo_PatchConfigAry.DiscardUnknown(m)
}

var xxx_messageInfo_PatchConfigAry proto.InternalMessageInfo

func (m *PatchConfigAry) GetAry() []*PatchConfig {
	if m != nil {
		return m.Ary
	}
	return nil
}

// 资源
type RemoteResourceConfig struct {
	Device               string   `protobuf:"bytes,1,opt,name=Device,proto3" json:"Device,omitempty"`
	MinVersion           string   `protobuf:"bytes,2,opt,name=MinVersion,proto3" json:"MinVersion,omitempty"`
	MaxVersion           string   `protobuf:"bytes,3,opt,name=MaxVersion,proto3" json:"MaxVersion,omitempty"`
	ConfigMD5            string   `protobuf:"bytes,4,opt,name=ConfigMD5,proto3" json:"ConfigMD5,omitempty"`
	ForceUpdate          bool     `protobuf:"varint,5,opt,name=ForceUpdate,proto3" json:"ForceUpdate,omitempty"`
	Channel              string   `protobuf:"bytes,6,opt,name=Channel,proto3" json:"Channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoteResourceConfig) Reset()         { *m = RemoteResourceConfig{} }
func (m *RemoteResourceConfig) String() string { return proto.CompactTextString(m) }
func (*RemoteResourceConfig) ProtoMessage()    {}
func (*RemoteResourceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_14021c854b2ee09a, []int{2}
}
func (m *RemoteResourceConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoteResourceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoteResourceConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoteResourceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteResourceConfig.Merge(m, src)
}
func (m *RemoteResourceConfig) XXX_Size() int {
	return m.Size()
}
func (m *RemoteResourceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteResourceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteResourceConfig proto.InternalMessageInfo

func (m *RemoteResourceConfig) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *RemoteResourceConfig) GetMinVersion() string {
	if m != nil {
		return m.MinVersion
	}
	return ""
}

func (m *RemoteResourceConfig) GetMaxVersion() string {
	if m != nil {
		return m.MaxVersion
	}
	return ""
}

func (m *RemoteResourceConfig) GetConfigMD5() string {
	if m != nil {
		return m.ConfigMD5
	}
	return ""
}

func (m *RemoteResourceConfig) GetForceUpdate() bool {
	if m != nil {
		return m.ForceUpdate
	}
	return false
}

func (m *RemoteResourceConfig) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

type RemoteResourceConfigAry struct {
	Ary                  []*RemoteResourceConfig `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RemoteResourceConfigAry) Reset()         { *m = RemoteResourceConfigAry{} }
func (m *RemoteResourceConfigAry) String() string { return proto.CompactTextString(m) }
func (*RemoteResourceConfigAry) ProtoMessage()    {}
func (*RemoteResourceConfigAry) Descriptor() ([]byte, []int) {
	return fileDescriptor_14021c854b2ee09a, []int{3}
}
func (m *RemoteResourceConfigAry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoteResourceConfigAry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoteResourceConfigAry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoteResourceConfigAry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteResourceConfigAry.Merge(m, src)
}
func (m *RemoteResourceConfigAry) XXX_Size() int {
	return m.Size()
}
func (m *RemoteResourceConfigAry) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteResourceConfigAry.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteResourceConfigAry proto.InternalMessageInfo

func (m *RemoteResourceConfigAry) GetAry() []*RemoteResourceConfig {
	if m != nil {
		return m.Ary
	}
	return nil
}

type LanguageContent struct {
	Lang                 string   `protobuf:"bytes,1,opt,name=Lang,proto3" json:"Lang,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LanguageContent) Reset()         { *m = LanguageContent{} }
func (m *LanguageContent) String() string { return proto.CompactTextString(m) }
func (*LanguageContent) ProtoMessage()    {}
func (*LanguageContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_14021c854b2ee09a, []int{4}
}
func (m *LanguageContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LanguageContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LanguageContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LanguageContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LanguageContent.Merge(m, src)
}
func (m *LanguageContent) XXX_Size() int {
	return m.Size()
}
func (m *LanguageContent) XXX_DiscardUnknown() {
	xxx_messageInfo_LanguageContent.DiscardUnknown(m)
}

var xxx_messageInfo_LanguageContent proto.InternalMessageInfo

func (m *LanguageContent) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *LanguageContent) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

//整包更新
type AppUpdateConfig struct {
	Device               string             `protobuf:"bytes,1,opt,name=Device,proto3" json:"Device,omitempty"`
	MinVersion           string             `protobuf:"bytes,2,opt,name=MinVersion,proto3" json:"MinVersion,omitempty"`
	PromptVersion        string             `protobuf:"bytes,3,opt,name=PromptVersion,proto3" json:"PromptVersion,omitempty"`
	Version              string             `protobuf:"bytes,4,opt,name=Version,proto3" json:"Version,omitempty"`
	Channel              string             `protobuf:"bytes,5,opt,name=Channel,proto3" json:"Channel,omitempty"`
	DownloadUrl          string             `protobuf:"bytes,6,opt,name=DownloadUrl,proto3" json:"DownloadUrl,omitempty"`
	Content              []*LanguageContent `protobuf:"bytes,7,rep,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AppUpdateConfig) Reset()         { *m = AppUpdateConfig{} }
func (m *AppUpdateConfig) String() string { return proto.CompactTextString(m) }
func (*AppUpdateConfig) ProtoMessage()    {}
func (*AppUpdateConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_14021c854b2ee09a, []int{5}
}
func (m *AppUpdateConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppUpdateConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppUpdateConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppUpdateConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppUpdateConfig.Merge(m, src)
}
func (m *AppUpdateConfig) XXX_Size() int {
	return m.Size()
}
func (m *AppUpdateConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AppUpdateConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AppUpdateConfig proto.InternalMessageInfo

func (m *AppUpdateConfig) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *AppUpdateConfig) GetMinVersion() string {
	if m != nil {
		return m.MinVersion
	}
	return ""
}

func (m *AppUpdateConfig) GetPromptVersion() string {
	if m != nil {
		return m.PromptVersion
	}
	return ""
}

func (m *AppUpdateConfig) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *AppUpdateConfig) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *AppUpdateConfig) GetDownloadUrl() string {
	if m != nil {
		return m.DownloadUrl
	}
	return ""
}

func (m *AppUpdateConfig) GetContent() []*LanguageContent {
	if m != nil {
		return m.Content
	}
	return nil
}

type AppUpdateConfigAry struct {
	Ary                  []*AppUpdateConfig `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AppUpdateConfigAry) Reset()         { *m = AppUpdateConfigAry{} }
func (m *AppUpdateConfigAry) String() string { return proto.CompactTextString(m) }
func (*AppUpdateConfigAry) ProtoMessage()    {}
func (*AppUpdateConfigAry) Descriptor() ([]byte, []int) {
	return fileDescriptor_14021c854b2ee09a, []int{6}
}
func (m *AppUpdateConfigAry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppUpdateConfigAry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppUpdateConfigAry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppUpdateConfigAry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppUpdateConfigAry.Merge(m, src)
}
func (m *AppUpdateConfigAry) XXX_Size() int {
	return m.Size()
}
func (m *AppUpdateConfigAry) XXX_DiscardUnknown() {
	xxx_messageInfo_AppUpdateConfigAry.DiscardUnknown(m)
}

var xxx_messageInfo_AppUpdateConfigAry proto.InternalMessageInfo

func (m *AppUpdateConfigAry) GetAry() []*AppUpdateConfig {
	if m != nil {
		return m.Ary
	}
	return nil
}

//停服信息
type ServerInfoConfig struct {
	IsStopped            bool               `protobuf:"varint,1,opt,name=IsStopped,proto3" json:"IsStopped,omitempty"`
	GatewayAddress       []string           `protobuf:"bytes,2,rep,name=GatewayAddress,proto3" json:"GatewayAddress,omitempty"`
	Content              []*LanguageContent `protobuf:"bytes,3,rep,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ServerInfoConfig) Reset()         { *m = ServerInfoConfig{} }
func (m *ServerInfoConfig) String() string { return proto.CompactTextString(m) }
func (*ServerInfoConfig) ProtoMessage()    {}
func (*ServerInfoConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_14021c854b2ee09a, []int{7}
}
func (m *ServerInfoConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerInfoConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerInfoConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerInfoConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerInfoConfig.Merge(m, src)
}
func (m *ServerInfoConfig) XXX_Size() int {
	return m.Size()
}
func (m *ServerInfoConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerInfoConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ServerInfoConfig proto.InternalMessageInfo

func (m *ServerInfoConfig) GetIsStopped() bool {
	if m != nil {
		return m.IsStopped
	}
	return false
}

func (m *ServerInfoConfig) GetGatewayAddress() []string {
	if m != nil {
		return m.GatewayAddress
	}
	return nil
}

func (m *ServerInfoConfig) GetContent() []*LanguageContent {
	if m != nil {
		return m.Content
	}
	return nil
}

type ServerInfoConfigAry struct {
	Ary                  []*ServerInfoConfig `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ServerInfoConfigAry) Reset()         { *m = ServerInfoConfigAry{} }
func (m *ServerInfoConfigAry) String() string { return proto.CompactTextString(m) }
func (*ServerInfoConfigAry) ProtoMessage()    {}
func (*ServerInfoConfigAry) Descriptor() ([]byte, []int) {
	return fileDescriptor_14021c854b2ee09a, []int{8}
}
func (m *ServerInfoConfigAry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerInfoConfigAry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerInfoConfigAry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerInfoConfigAry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerInfoConfigAry.Merge(m, src)
}
func (m *ServerInfoConfigAry) XXX_Size() int {
	return m.Size()
}
func (m *ServerInfoConfigAry) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerInfoConfigAry.DiscardUnknown(m)
}

var xxx_messageInfo_ServerInfoConfigAry proto.InternalMessageInfo

func (m *ServerInfoConfigAry) GetAry() []*ServerInfoConfig {
	if m != nil {
		return m.Ary
	}
	return nil
}

//资源地址配置
type CDNInfoConfig struct {
	CdnHost              string   `protobuf:"bytes,1,opt,name=CdnHost,proto3" json:"CdnHost,omitempty"`
	ResourcePath         string   `protobuf:"bytes,2,opt,name=ResourcePath,proto3" json:"ResourcePath,omitempty"`
	ConfigPath           string   `protobuf:"bytes,3,opt,name=ConfigPath,proto3" json:"ConfigPath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDNInfoConfig) Reset()         { *m = CDNInfoConfig{} }
func (m *CDNInfoConfig) String() string { return proto.CompactTextString(m) }
func (*CDNInfoConfig) ProtoMessage()    {}
func (*CDNInfoConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_14021c854b2ee09a, []int{9}
}
func (m *CDNInfoConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDNInfoConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CDNInfoConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CDNInfoConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDNInfoConfig.Merge(m, src)
}
func (m *CDNInfoConfig) XXX_Size() int {
	return m.Size()
}
func (m *CDNInfoConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CDNInfoConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CDNInfoConfig proto.InternalMessageInfo

func (m *CDNInfoConfig) GetCdnHost() string {
	if m != nil {
		return m.CdnHost
	}
	return ""
}

func (m *CDNInfoConfig) GetResourcePath() string {
	if m != nil {
		return m.ResourcePath
	}
	return ""
}

func (m *CDNInfoConfig) GetConfigPath() string {
	if m != nil {
		return m.ConfigPath
	}
	return ""
}

type CDNInfoConfigAry struct {
	Ary                  []*CDNInfoConfig `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CDNInfoConfigAry) Reset()         { *m = CDNInfoConfigAry{} }
func (m *CDNInfoConfigAry) String() string { return proto.CompactTextString(m) }
func (*CDNInfoConfigAry) ProtoMessage()    {}
func (*CDNInfoConfigAry) Descriptor() ([]byte, []int) {
	return fileDescriptor_14021c854b2ee09a, []int{10}
}
func (m *CDNInfoConfigAry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDNInfoConfigAry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CDNInfoConfigAry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CDNInfoConfigAry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDNInfoConfigAry.Merge(m, src)
}
func (m *CDNInfoConfigAry) XXX_Size() int {
	return m.Size()
}
func (m *CDNInfoConfigAry) XXX_DiscardUnknown() {
	xxx_messageInfo_CDNInfoConfigAry.DiscardUnknown(m)
}

var xxx_messageInfo_CDNInfoConfigAry proto.InternalMessageInfo

func (m *CDNInfoConfigAry) GetAry() []*CDNInfoConfig {
	if m != nil {
		return m.Ary
	}
	return nil
}

func init() {
	proto.RegisterType((*PatchConfig)(nil), "forevernine.base.proto.PatchConfig")
	proto.RegisterType((*PatchConfigAry)(nil), "forevernine.base.proto.PatchConfigAry")
	proto.RegisterType((*RemoteResourceConfig)(nil), "forevernine.base.proto.RemoteResourceConfig")
	proto.RegisterType((*RemoteResourceConfigAry)(nil), "forevernine.base.proto.RemoteResourceConfigAry")
	proto.RegisterType((*LanguageContent)(nil), "forevernine.base.proto.LanguageContent")
	proto.RegisterType((*AppUpdateConfig)(nil), "forevernine.base.proto.AppUpdateConfig")
	proto.RegisterType((*AppUpdateConfigAry)(nil), "forevernine.base.proto.AppUpdateConfigAry")
	proto.RegisterType((*ServerInfoConfig)(nil), "forevernine.base.proto.ServerInfoConfig")
	proto.RegisterType((*ServerInfoConfigAry)(nil), "forevernine.base.proto.ServerInfoConfigAry")
	proto.RegisterType((*CDNInfoConfig)(nil), "forevernine.base.proto.CDNInfoConfig")
	proto.RegisterType((*CDNInfoConfigAry)(nil), "forevernine.base.proto.CDNInfoConfigAry")
}

func init() { proto.RegisterFile("base_table.proto", fileDescriptor_14021c854b2ee09a) }

var fileDescriptor_14021c854b2ee09a = []byte{
	// 653 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xdf, 0x4e, 0x13, 0x4f,
	0x14, 0xc7, 0x99, 0xb6, 0x14, 0x7a, 0xf8, 0xf1, 0x27, 0xf3, 0x33, 0xb8, 0x31, 0x64, 0xd3, 0xd4,
	0x7f, 0x6b, 0x62, 0xda, 0x04, 0x43, 0x8c, 0x5e, 0x68, 0x96, 0x16, 0x81, 0x28, 0x52, 0x97, 0x62,
	0x82, 0x37, 0x64, 0xda, 0x1d, 0x4a, 0x93, 0x76, 0x66, 0x33, 0x3b, 0x80, 0x7d, 0x03, 0xe3, 0x2b,
	0xf8, 0x42, 0x5c, 0xf2, 0x08, 0xda, 0x2b, 0x2f, 0x7d, 0x04, 0x33, 0xb3, 0xbb, 0xee, 0xec, 0xda,
	0xc6, 0x44, 0xef, 0x38, 0xdf, 0x33, 0xe7, 0xec, 0xf9, 0x7e, 0xce, 0x0c, 0x85, 0xb5, 0x2e, 0x09,
	0xe9, 0xa9, 0x24, 0xdd, 0x21, 0xad, 0x07, 0x82, 0x4b, 0x8e, 0xd7, 0xcf, 0xb8, 0xa0, 0x97, 0x54,
	0xb0, 0x01, 0xa3, 0x75, 0x95, 0x8d, 0xf4, 0x3b, 0xab, 0xfa, 0x24, 0x65, 0x17, 0xa3, 0x48, 0xa8,
	0x7d, 0x2e, 0xc0, 0x52, 0x9b, 0xc8, 0xde, 0x79, 0x93, 0xb3, 0xb3, 0x41, 0x1f, 0x5b, 0xb0, 0xf0,
	0x9e, 0x8a, 0x70, 0xc0, 0x99, 0x85, 0xaa, 0xc8, 0xa9, 0x78, 0x49, 0x88, 0xd7, 0xa1, 0xdc, 0xa2,
	0x97, 0x83, 0x1e, 0xb5, 0x0a, 0x3a, 0x11, 0x47, 0x78, 0x03, 0x2a, 0x51, 0xed, 0x41, 0x6b, 0xcb,
	0x2a, 0xea, 0x54, 0x2a, 0xe0, 0x2a, 0x2c, 0xbd, 0xe2, 0xa2, 0x47, 0x8f, 0x03, 0x9f, 0x48, 0x6a,
	0x95, 0xaa, 0xc8, 0x59, 0xf4, 0x4c, 0x09, 0x3f, 0x80, 0x95, 0x43, 0x36, 0x1c, 0x47, 0x51, 0x93,
	0xfb, 0xd4, 0x9a, 0xd7, 0x87, 0x72, 0x2a, 0xde, 0x85, 0x8a, 0x1e, 0xb4, 0x33, 0x0e, 0xa8, 0x55,
	0xae, 0x22, 0x67, 0x65, 0xf3, 0x51, 0x7d, 0xba, 0xcd, 0x7a, 0xdb, 0xed, 0x34, 0xf7, 0x4e, 0x8f,
	0xdb, 0x2d, 0xb7, 0xb3, 0x73, 0xda, 0x39, 0x69, 0xef, 0x78, 0x69, 0xad, 0xb2, 0xd8, 0x3c, 0x27,
	0x8c, 0xd1, 0xa1, 0xb5, 0x10, 0x59, 0x8c, 0xc3, 0xda, 0x2e, 0xac, 0x18, 0x2c, 0x5c, 0x31, 0xc6,
	0x5b, 0x50, 0x74, 0xc5, 0xd8, 0x42, 0xd5, 0xa2, 0xb3, 0xb4, 0x79, 0x77, 0xe6, 0xe7, 0xd2, 0x22,
	0x4f, 0x9d, 0xaf, 0x5d, 0x23, 0xb8, 0xe5, 0xd1, 0x11, 0x97, 0xd4, 0xa3, 0x21, 0xbf, 0x10, 0x3d,
	0x1a, 0xe3, 0x4d, 0x21, 0xa2, 0x0c, 0x44, 0x1b, 0xe0, 0x60, 0xc0, 0x12, 0xf2, 0x11, 0x60, 0x43,
	0xd1, 0x79, 0xf2, 0x31, 0xc9, 0x17, 0xe3, 0xfc, 0x2f, 0x25, 0xbb, 0x84, 0xd2, 0x1f, 0x96, 0x30,
	0xff, 0xfb, 0x12, 0x0c, 0x26, 0xe5, 0x2c, 0x93, 0x13, 0xb8, 0x3d, 0xcd, 0x89, 0x82, 0xf3, 0xc2,
	0x84, 0xf3, 0x78, 0x16, 0x9c, 0x69, 0xd5, 0x11, 0xa5, 0x97, 0xb0, 0xfa, 0x86, 0xb0, 0xfe, 0x05,
	0xe9, 0x2b, 0x59, 0x52, 0x26, 0x31, 0x86, 0x92, 0x92, 0x62, 0x3a, 0xfa, 0x6f, 0x3d, 0x5b, 0x94,
	0x8e, 0xc1, 0x24, 0x61, 0xed, 0x53, 0x01, 0x56, 0xdd, 0x20, 0x48, 0x2e, 0xc9, 0x3f, 0x11, 0xbe,
	0x07, 0xcb, 0x6d, 0xc1, 0x47, 0x81, 0xcc, 0x42, 0xce, 0x8a, 0xe6, 0xf3, 0x28, 0x65, 0x9f, 0x87,
	0x41, 0x70, 0x3e, 0x43, 0x50, 0xd1, 0x6f, 0xf1, 0x2b, 0x36, 0xe4, 0xc4, 0x3f, 0x16, 0x09, 0x5f,
	0x53, 0xc2, 0x6e, 0xea, 0x70, 0x41, 0xc3, 0x7c, 0x38, 0x0b, 0x66, 0x8e, 0x57, 0x8a, 0xe2, 0x10,
	0x70, 0x8e, 0x84, 0xda, 0xd0, 0x33, 0x73, 0x43, 0x33, 0x9b, 0xe6, 0x0a, 0xa3, 0xe5, 0x7c, 0x41,
	0xb0, 0x76, 0x44, 0xc5, 0x25, 0x15, 0xfb, 0xec, 0x8c, 0xc7, 0x70, 0x37, 0xa0, 0xb2, 0x1f, 0x1e,
	0x49, 0x1e, 0x04, 0xd4, 0xd7, 0x7c, 0x17, 0xbd, 0x54, 0x50, 0x2f, 0x79, 0x97, 0x48, 0x7a, 0x45,
	0xc6, 0xae, 0xef, 0x0b, 0x1a, 0x86, 0x56, 0xa1, 0x5a, 0x74, 0x2a, 0x5e, 0x4e, 0x35, 0xed, 0x16,
	0xff, 0xd2, 0xee, 0x3b, 0xf8, 0x3f, 0x3f, 0x9c, 0xf2, 0xfb, 0xdc, 0xf4, 0xeb, 0xcc, 0xea, 0x9a,
	0xaf, 0x8c, 0x0c, 0x8f, 0x60, 0xb9, 0xd9, 0x7a, 0x6b, 0x98, 0x55, 0x1b, 0xf5, 0xd9, 0x1e, 0x0f,
	0x65, 0xf2, 0xaf, 0x30, 0x0e, 0x71, 0x0d, 0xfe, 0x4b, 0xee, 0x73, 0x9b, 0xc8, 0xf3, 0xf8, 0x36,
	0x65, 0x34, 0x75, 0xdf, 0xa2, 0x3e, 0xfa, 0x44, 0xfc, 0x62, 0x53, 0xa5, 0xf6, 0x1a, 0xd6, 0x32,
	0x9f, 0x53, 0xe3, 0x3f, 0x35, 0xc7, 0xbf, 0x3f, 0x6b, 0xfc, 0x4c, 0x99, 0x9e, 0x7d, 0x7b, 0xfb,
	0xe6, 0x9b, 0x3d, 0x77, 0x3d, 0xb1, 0xd1, 0xcd, 0xc4, 0x46, 0x5f, 0x27, 0x36, 0xfa, 0x3e, 0xb1,
	0xe7, 0x7e, 0x4c, 0x6c, 0xf4, 0xc1, 0x31, 0x9b, 0xf4, 0xf8, 0xa8, 0x31, 0x1a, 0xf8, 0xc1, 0x90,
	0xc8, 0x86, 0xfe, 0x21, 0xd0, 0x0d, 0x1b, 0x7d, 0xde, 0x08, 0xba, 0xdd, 0xb2, 0x0e, 0x9e, 0xfc,
	0x0c, 0x00, 0x00, 0xff, 0xff, 0x37, 0x23, 0x37, 0x51, 0x4d, 0x06, 0x00, 0x00,
}

func (m *PatchConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PatchConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PatchConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintBaseTable(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x3a
	}
	if m.PatchType != 0 {
		i = encodeVarintBaseTable(dAtA, i, uint64(m.PatchType))
		i--
		dAtA[i] = 0x30
	}
	if m.OnlyUpdateCode {
		i--
		if m.OnlyUpdateCode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ForceUpdate {
		i--
		if m.ForceUpdate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.ConfigMD5) > 0 {
		i -= len(m.ConfigMD5)
		copy(dAtA[i:], m.ConfigMD5)
		i = encodeVarintBaseTable(dAtA, i, uint64(len(m.ConfigMD5)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintBaseTable(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintBaseTable(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PatchConfigAry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PatchConfigAry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PatchConfigAry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ary) > 0 {
		for iNdEx := len(m.Ary) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ary[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBaseTable(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RemoteResourceConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoteResourceConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoteResourceConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintBaseTable(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x32
	}
	if m.ForceUpdate {
		i--
		if m.ForceUpdate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.ConfigMD5) > 0 {
		i -= len(m.ConfigMD5)
		copy(dAtA[i:], m.ConfigMD5)
		i = encodeVarintBaseTable(dAtA, i, uint64(len(m.ConfigMD5)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MaxVersion) > 0 {
		i -= len(m.MaxVersion)
		copy(dAtA[i:], m.MaxVersion)
		i = encodeVarintBaseTable(dAtA, i, uint64(len(m.MaxVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MinVersion) > 0 {
		i -= len(m.MinVersion)
		copy(dAtA[i:], m.MinVersion)
		i = encodeVarintBaseTable(dAtA, i, uint64(len(m.MinVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintBaseTable(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoteResourceConfigAry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoteResourceConfigAry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoteResourceConfigAry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ary) > 0 {
		for iNdEx := len(m.Ary) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ary[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBaseTable(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LanguageContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LanguageContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LanguageContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintBaseTable(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Lang) > 0 {
		i -= len(m.Lang)
		copy(dAtA[i:], m.Lang)
		i = encodeVarintBaseTable(dAtA, i, uint64(len(m.Lang)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppUpdateConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppUpdateConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppUpdateConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		for iNdEx := len(m.Content) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Content[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBaseTable(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DownloadUrl) > 0 {
		i -= len(m.DownloadUrl)
		copy(dAtA[i:], m.DownloadUrl)
		i = encodeVarintBaseTable(dAtA, i, uint64(len(m.DownloadUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintBaseTable(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintBaseTable(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PromptVersion) > 0 {
		i -= len(m.PromptVersion)
		copy(dAtA[i:], m.PromptVersion)
		i = encodeVarintBaseTable(dAtA, i, uint64(len(m.PromptVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MinVersion) > 0 {
		i -= len(m.MinVersion)
		copy(dAtA[i:], m.MinVersion)
		i = encodeVarintBaseTable(dAtA, i, uint64(len(m.MinVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintBaseTable(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppUpdateConfigAry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppUpdateConfigAry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppUpdateConfigAry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ary) > 0 {
		for iNdEx := len(m.Ary) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ary[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBaseTable(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ServerInfoConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerInfoConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerInfoConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		for iNdEx := len(m.Content) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Content[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBaseTable(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.GatewayAddress) > 0 {
		for iNdEx := len(m.GatewayAddress) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GatewayAddress[iNdEx])
			copy(dAtA[i:], m.GatewayAddress[iNdEx])
			i = encodeVarintBaseTable(dAtA, i, uint64(len(m.GatewayAddress[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.IsStopped {
		i--
		if m.IsStopped {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServerInfoConfigAry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerInfoConfigAry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerInfoConfigAry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ary) > 0 {
		for iNdEx := len(m.Ary) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ary[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBaseTable(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CDNInfoConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDNInfoConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNInfoConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConfigPath) > 0 {
		i -= len(m.ConfigPath)
		copy(dAtA[i:], m.ConfigPath)
		i = encodeVarintBaseTable(dAtA, i, uint64(len(m.ConfigPath)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ResourcePath) > 0 {
		i -= len(m.ResourcePath)
		copy(dAtA[i:], m.ResourcePath)
		i = encodeVarintBaseTable(dAtA, i, uint64(len(m.ResourcePath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CdnHost) > 0 {
		i -= len(m.CdnHost)
		copy(dAtA[i:], m.CdnHost)
		i = encodeVarintBaseTable(dAtA, i, uint64(len(m.CdnHost)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CDNInfoConfigAry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDNInfoConfigAry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDNInfoConfigAry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ary) > 0 {
		for iNdEx := len(m.Ary) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ary[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBaseTable(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintBaseTable(dAtA []byte, offset int, v uint64) int {
	offset -= sovBaseTable(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PatchConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovBaseTable(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovBaseTable(uint64(l))
	}
	l = len(m.ConfigMD5)
	if l > 0 {
		n += 1 + l + sovBaseTable(uint64(l))
	}
	if m.ForceUpdate {
		n += 2
	}
	if m.OnlyUpdateCode {
		n += 2
	}
	if m.PatchType != 0 {
		n += 1 + sovBaseTable(uint64(m.PatchType))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovBaseTable(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PatchConfigAry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ary) > 0 {
		for _, e := range m.Ary {
			l = e.Size()
			n += 1 + l + sovBaseTable(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoteResourceConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovBaseTable(uint64(l))
	}
	l = len(m.MinVersion)
	if l > 0 {
		n += 1 + l + sovBaseTable(uint64(l))
	}
	l = len(m.MaxVersion)
	if l > 0 {
		n += 1 + l + sovBaseTable(uint64(l))
	}
	l = len(m.ConfigMD5)
	if l > 0 {
		n += 1 + l + sovBaseTable(uint64(l))
	}
	if m.ForceUpdate {
		n += 2
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovBaseTable(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoteResourceConfigAry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ary) > 0 {
		for _, e := range m.Ary {
			l = e.Size()
			n += 1 + l + sovBaseTable(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LanguageContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Lang)
	if l > 0 {
		n += 1 + l + sovBaseTable(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovBaseTable(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppUpdateConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovBaseTable(uint64(l))
	}
	l = len(m.MinVersion)
	if l > 0 {
		n += 1 + l + sovBaseTable(uint64(l))
	}
	l = len(m.PromptVersion)
	if l > 0 {
		n += 1 + l + sovBaseTable(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovBaseTable(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovBaseTable(uint64(l))
	}
	l = len(m.DownloadUrl)
	if l > 0 {
		n += 1 + l + sovBaseTable(uint64(l))
	}
	if len(m.Content) > 0 {
		for _, e := range m.Content {
			l = e.Size()
			n += 1 + l + sovBaseTable(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppUpdateConfigAry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ary) > 0 {
		for _, e := range m.Ary {
			l = e.Size()
			n += 1 + l + sovBaseTable(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerInfoConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsStopped {
		n += 2
	}
	if len(m.GatewayAddress) > 0 {
		for _, s := range m.GatewayAddress {
			l = len(s)
			n += 1 + l + sovBaseTable(uint64(l))
		}
	}
	if len(m.Content) > 0 {
		for _, e := range m.Content {
			l = e.Size()
			n += 1 + l + sovBaseTable(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerInfoConfigAry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ary) > 0 {
		for _, e := range m.Ary {
			l = e.Size()
			n += 1 + l + sovBaseTable(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CDNInfoConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CdnHost)
	if l > 0 {
		n += 1 + l + sovBaseTable(uint64(l))
	}
	l = len(m.ResourcePath)
	if l > 0 {
		n += 1 + l + sovBaseTable(uint64(l))
	}
	l = len(m.ConfigPath)
	if l > 0 {
		n += 1 + l + sovBaseTable(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CDNInfoConfigAry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ary) > 0 {
		for _, e := range m.Ary {
			l = e.Size()
			n += 1 + l + sovBaseTable(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBaseTable(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBaseTable(x uint64) (n int) {
	return sovBaseTable(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PatchConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaseTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PatchConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PatchConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigMD5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigMD5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceUpdate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceUpdate = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyUpdateCode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnlyUpdateCode = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatchType", wireType)
			}
			m.PatchType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PatchType |= PATCH_UPDATE_TYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBaseTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBaseTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PatchConfigAry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaseTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PatchConfigAry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PatchConfigAry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ary = append(m.Ary, &PatchConfig{})
			if err := m.Ary[len(m.Ary)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBaseTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBaseTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoteResourceConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaseTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteResourceConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteResourceConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigMD5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigMD5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceUpdate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceUpdate = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBaseTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBaseTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoteResourceConfigAry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaseTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteResourceConfigAry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteResourceConfigAry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ary = append(m.Ary, &RemoteResourceConfig{})
			if err := m.Ary[len(m.Ary)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBaseTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBaseTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LanguageContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaseTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LanguageContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LanguageContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBaseTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBaseTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppUpdateConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaseTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppUpdateConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppUpdateConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromptVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PromptVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownloadUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content, &LanguageContent{})
			if err := m.Content[len(m.Content)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBaseTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBaseTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppUpdateConfigAry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaseTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppUpdateConfigAry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppUpdateConfigAry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ary = append(m.Ary, &AppUpdateConfig{})
			if err := m.Ary[len(m.Ary)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBaseTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBaseTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerInfoConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaseTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerInfoConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerInfoConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStopped", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsStopped = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayAddress = append(m.GatewayAddress, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content, &LanguageContent{})
			if err := m.Content[len(m.Content)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBaseTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBaseTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerInfoConfigAry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaseTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerInfoConfigAry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerInfoConfigAry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ary = append(m.Ary, &ServerInfoConfig{})
			if err := m.Ary[len(m.Ary)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBaseTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBaseTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDNInfoConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaseTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDNInfoConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDNInfoConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdnHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CdnHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourcePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourcePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBaseTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBaseTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDNInfoConfigAry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaseTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDNInfoConfigAry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDNInfoConfigAry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBaseTable
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBaseTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ary = append(m.Ary, &CDNInfoConfig{})
			if err := m.Ary[len(m.Ary)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBaseTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBaseTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBaseTable(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBaseTable
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBaseTable
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBaseTable
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBaseTable
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBaseTable
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBaseTable        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBaseTable          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBaseTable = fmt.Errorf("proto: unexpected end of group")
)
